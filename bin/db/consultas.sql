/*Busqueda y filtrado*/
CREATE OR REPLACE FUNCTION FILTER_COMPANY(
    P_NAME VARCHAR,
    P_TYPE VARCHAR,
    P_COUNTRY VARCHAR,
    P_NIF VARCHAR
) RETURN SYS_REFCURSOR IS
    CUR SYS_REFCURSOR;
BEGIN
OPEN CUR FOR
SELECT *
FROM COMPANY
WHERE (P_NAME IS NULL OR NAME = P_NAME)
  AND (P_TYPE IS NULL OR TYPE = P_TYPE)
  AND (P_COUNTRY IS NULL OR COUNTRY = P_COUNTRY)
  AND (P_NIF IS NULL OR NIF = P_NIF);

RETURN CUR;
END;
/

/*Busqueda y filtrado traducido a MySQL*/
DELIMITER //
CREATE FUNCTION FILTER_COMPANY(
    P_NAME VARCHAR(255),
    P_TYPE VARCHAR(255),
    P_COUNTRY VARCHAR(255),
    P_NIF VARCHAR(10)
)
    RETURNS BOOLEAN
BEGIN
    DECLARE FILTER BOOLEAN;

    SET FILTER = FALSE;

    IF P_NAME IS NOT NULL THEN
    IF P_NAME = NAME THEN
    SET FILTER = TRUE;
END IF;
END IF;

IF P_TYPE IS NOT NULL THEN
        IF P_TYPE = TYPE THEN
SET FILTER = TRUE;
END IF;
END IF;

IF P_COUNTRY IS NOT NULL THEN
        IF P_COUNTRY = COUNTRY THEN
SET FILTER = TRUE;
END IF;
END IF;

IF P_NIF IS NOT NULL THEN
        IF P_NIF = NIF THEN
SET FILTER = TRUE;
END IF;
END IF;

RETURN FILTER;
END;
//
DELIMITER ;



/*Introducir empresas nuevas*/
CREATE OR REPLACE FUNCTION INSERT_EMPRESA(
    P_NIF VARCHAR(10),
    P_NOMBRE VARCHAR(12),
    P_TIPO VARCHAR(15),
    P_PAIS VARCHAR(20),
    P_DIRECCION VARCHAR(50),
    P_TELEFONO VARCHAR(12),
    P_EMAIL VARCHAR(30)
)
    RETURN VOID AS $$;
BEGIN
    INSERT INTO COMPANY (NIF, NAME, TYPE, COUNTRY, ADDRESS, PHONE, EMAIL)
    VALUES (P_NIF, P_NOMBRE, P_TIPO, P_PAIS, P_DIRECCION, P_TELEFONO, P_EMAIL);
END;
$$ LANGUAGE plpgsql;

/*Introducir nuevas empresas traducido a MySQL*/
DELIMITER //
CREATE PROCEDURE INSERT_EMPRESA(
    IN P_NIF VARCHAR(10),
    IN P_NOMBRE VARCHAR(12),
    IN P_TIPO VARCHAR(15),
    IN P_PAIS VARCHAR(20),
    IN P_DIRECCION VARCHAR(50),
    IN P_TELEFONO VARCHAR(12),
    IN P_EMAIL VARCHAR(30)
)
RETURN VOID
BEGIN
    INSERT INTO COMPANY (NIF, NAME, TYPE, COUNTRY, ADDRESS, PHONE, EMAIL)
    VALUES (P_NIF, P_NOMBRE, P_TIPO, P_PAIS, P_DIRECCION, P_TELEFONO, P_EMAIL);
END;
//
DELIMITER ;


/*Ver Transaccion*/
/*nota para el futuro sacar el nif a nombre de la compañia en caso de tener dicha compañia en la base de datos*/
CREATE OR REPLACE PROCEDURE SEE_TRANSACTION(P_ID_TRANSACTION)
AS
P_NIF_ORIGIN VARCHAR(10);
P_NIF_DESTINATION VARCHAR(10);
P_AMOUNT NUMBER;
P_DATE_TRANSACTION DATE;
BEGIN
SELECT NIF_ORIGIN,NIF_DESTINATION,AMOUNT,DATE_TRANSACTION INTO P_NIF_ORIGIN,P_NIF_DESTINATION,P_AMOUNT,P_DATE_TRANSACTION FROM COMPANY_TRANSACTION WHERE ID_TRANSACTION=P_ID_TRANSACTION;
DBMS_OUTPUT.PUT_LINE('La transaccion '||P_ID_TRANSACTION||' tiene un nif de origen: '||P_NIF_ORIGIN||', con un nif destino: '||P_NIF_DESTINATION||', cuya cantidad es de: '||P_AMOUNT||', y se realizo en: '||P_DATE_TRANSACTION||'.');
EXCEPTION
WHEN NO_DATA_FOUND THEN 
DBMS_OUTPUT.PUT_LINE('El ID de la transaccion esta mal escrito o no existe en nuestra base de datos.');
END;

/*Ver Transacion en mysql*/
DELIMITER //
CREATE PROCEDURE SEE_TRANSACTION(IN P_ID_TRANSACTION INT)
BEGIN
  DECLARE P_NIF_ORIGIN VARCHAR(10);
  DECLARE P_NIF_DESTINATION VARCHAR(10);
  DECLARE P_AMOUNT DECIMAL(10, 2);
  DECLARE P_DATE_TRANSACTION DATE;
  
  SELECT NIF_ORIGIN, NIF_DESTINATION, AMOUNT, DATE_TRANSACTION
  INTO P_NIF_ORIGIN, P_NIF_DESTINATION, P_AMOUNT, P_DATE_TRANSACTION
  FROM COMPANY_TRANSACTION
  WHERE ID_TRANSACTION = P_ID_TRANSACTION;
  
  SELECT CONCAT('La transacción ', P_ID_TRANSACTION, ' tiene un NIF de origen: ', P_NIF_ORIGIN, 
                ', con un NIF destino: ', P_NIF_DESTINATION, ', cuya cantidad es de: ', P_AMOUNT,
                ', y se realizó en: ', P_DATE_TRANSACTION, '.') AS Result;
  
  IF ROW_COUNT() = 0 THEN
    SELECT 'El ID de la transacción está mal escrito o no existe en nuestra base de datos.' AS Result;
  END IF;
END;
//
DELIMITER ;
